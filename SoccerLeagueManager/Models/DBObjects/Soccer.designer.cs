#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoccerLeagueManager.Models.DBObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="soccer")]
	public partial class SoccerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    partial void InsertSoccerMatch(SoccerMatch instance);
    partial void UpdateSoccerMatch(SoccerMatch instance);
    partial void DeleteSoccerMatch(SoccerMatch instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    #endregion
		
		public SoccerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["soccerConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SoccerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
		
		public System.Data.Linq.Table<SoccerMatch> SoccerMatches
		{
			get
			{
				return this.GetTable<SoccerMatch>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leagues")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDLeague;
		
		private string _NameLeague;
		
		private string _Country;
		
		private int _NumberOfTeams;
		
		private string _Sponsor;
		
		private EntitySet<SoccerMatch> _SoccerMatches;
		
		private EntitySet<Team> _Teams;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLeagueChanging(System.Guid value);
    partial void OnIDLeagueChanged();
    partial void OnNameLeagueChanging(string value);
    partial void OnNameLeagueChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnNumberOfTeamsChanging(int value);
    partial void OnNumberOfTeamsChanged();
    partial void OnSponsorChanging(string value);
    partial void OnSponsorChanged();
    #endregion
		
		public League()
		{
			this._SoccerMatches = new EntitySet<SoccerMatch>(new Action<SoccerMatch>(this.attach_SoccerMatches), new Action<SoccerMatch>(this.detach_SoccerMatches));
			this._Teams = new EntitySet<Team>(new Action<Team>(this.attach_Teams), new Action<Team>(this.detach_Teams));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLeague", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDLeague
		{
			get
			{
				return this._IDLeague;
			}
			set
			{
				if ((this._IDLeague != value))
				{
					this.OnIDLeagueChanging(value);
					this.SendPropertyChanging();
					this._IDLeague = value;
					this.SendPropertyChanged("IDLeague");
					this.OnIDLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameLeague", DbType="VarChar(50)")]
		public string NameLeague
		{
			get
			{
				return this._NameLeague;
			}
			set
			{
				if ((this._NameLeague != value))
				{
					this.OnNameLeagueChanging(value);
					this.SendPropertyChanging();
					this._NameLeague = value;
					this.SendPropertyChanged("NameLeague");
					this.OnNameLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfTeams", DbType="Int NOT NULL")]
		public int NumberOfTeams
		{
			get
			{
				return this._NumberOfTeams;
			}
			set
			{
				if ((this._NumberOfTeams != value))
				{
					this.OnNumberOfTeamsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfTeams = value;
					this.SendPropertyChanged("NumberOfTeams");
					this.OnNumberOfTeamsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sponsor", DbType="VarChar(50)")]
		public string Sponsor
		{
			get
			{
				return this._Sponsor;
			}
			set
			{
				if ((this._Sponsor != value))
				{
					this.OnSponsorChanging(value);
					this.SendPropertyChanging();
					this._Sponsor = value;
					this.SendPropertyChanged("Sponsor");
					this.OnSponsorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_SoccerMatch", Storage="_SoccerMatches", ThisKey="IDLeague", OtherKey="IdLeague")]
		public EntitySet<SoccerMatch> SoccerMatches
		{
			get
			{
				return this._SoccerMatches;
			}
			set
			{
				this._SoccerMatches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Team", Storage="_Teams", ThisKey="IDLeague", OtherKey="IdLeague")]
		public EntitySet<Team> Teams
		{
			get
			{
				return this._Teams;
			}
			set
			{
				this._Teams.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SoccerMatches(SoccerMatch entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_SoccerMatches(SoccerMatch entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
		
		private void attach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_Teams(Team entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Players")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDPlayer;
		
		private string _Name;
		
		private string _Surname;
		
		private string _Position;
		
		private string _Team;
		
		private System.Nullable<int> _Value_EUR;
		
		private System.Guid _IdTeam;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPlayerChanging(System.Guid value);
    partial void OnIDPlayerChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnTeamChanging(string value);
    partial void OnTeamChanged();
    partial void OnValue_EURChanging(System.Nullable<int> value);
    partial void OnValue_EURChanged();
    partial void OnIdTeamChanging(System.Guid value);
    partial void OnIdTeamChanged();
    #endregion
		
		public Player()
		{
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPlayer", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDPlayer
		{
			get
			{
				return this._IDPlayer;
			}
			set
			{
				if ((this._IDPlayer != value))
				{
					this.OnIDPlayerChanging(value);
					this.SendPropertyChanging();
					this._IDPlayer = value;
					this.SendPropertyChanged("IDPlayer");
					this.OnIDPlayerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="VarChar(50)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value_EUR", DbType="Int")]
		public System.Nullable<int> Value_EUR
		{
			get
			{
				return this._Value_EUR;
			}
			set
			{
				if ((this._Value_EUR != value))
				{
					this.OnValue_EURChanging(value);
					this.SendPropertyChanging();
					this._Value_EUR = value;
					this.SendPropertyChanged("Value_EUR");
					this.OnValue_EURChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdTeam", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdTeam
		{
			get
			{
				return this._IdTeam;
			}
			set
			{
				if ((this._IdTeam != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdTeamChanging(value);
					this.SendPropertyChanging();
					this._IdTeam = value;
					this.SendPropertyChanged("IdTeam");
					this.OnIdTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Team1", ThisKey="IdTeam", OtherKey="IDTeam", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Players.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Players.Add(this);
						this._IdTeam = value.IDTeam;
					}
					else
					{
						this._IdTeam = default(System.Guid);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SoccerMatches")]
	public partial class SoccerMatch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDMatch;
		
		private string _HomeTeam;
		
		private string _GuestTeam;
		
		private string _Stadium;
		
		private string _City;
		
		private System.Guid _IdLeague;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDMatchChanging(System.Guid value);
    partial void OnIDMatchChanged();
    partial void OnHomeTeamChanging(string value);
    partial void OnHomeTeamChanged();
    partial void OnGuestTeamChanging(string value);
    partial void OnGuestTeamChanged();
    partial void OnStadiumChanging(string value);
    partial void OnStadiumChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnIdLeagueChanging(System.Guid value);
    partial void OnIdLeagueChanged();
    #endregion
		
		public SoccerMatch()
		{
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDMatch", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDMatch
		{
			get
			{
				return this._IDMatch;
			}
			set
			{
				if ((this._IDMatch != value))
				{
					this.OnIDMatchChanging(value);
					this.SendPropertyChanging();
					this._IDMatch = value;
					this.SendPropertyChanged("IDMatch");
					this.OnIDMatchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					this.OnHomeTeamChanging(value);
					this.SendPropertyChanging();
					this._HomeTeam = value;
					this.SendPropertyChanged("HomeTeam");
					this.OnHomeTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GuestTeam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string GuestTeam
		{
			get
			{
				return this._GuestTeam;
			}
			set
			{
				if ((this._GuestTeam != value))
				{
					this.OnGuestTeamChanging(value);
					this.SendPropertyChanging();
					this._GuestTeam = value;
					this.SendPropertyChanged("GuestTeam");
					this.OnGuestTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Stadium", DbType="VarChar(50)")]
		public string Stadium
		{
			get
			{
				return this._Stadium;
			}
			set
			{
				if ((this._Stadium != value))
				{
					this.OnStadiumChanging(value);
					this.SendPropertyChanging();
					this._Stadium = value;
					this.SendPropertyChanged("Stadium");
					this.OnStadiumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLeague", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdLeague
		{
			get
			{
				return this._IdLeague;
			}
			set
			{
				if ((this._IdLeague != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLeagueChanging(value);
					this.SendPropertyChanging();
					this._IdLeague = value;
					this.SendPropertyChanged("IdLeague");
					this.OnIdLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_SoccerMatch", Storage="_League", ThisKey="IdLeague", OtherKey="IDLeague", IsForeignKey=true)]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.SoccerMatches.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.SoccerMatches.Add(this);
						this._IdLeague = value.IDLeague;
					}
					else
					{
						this._IdLeague = default(System.Guid);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _IDTeam;
		
		private string _Name;
		
		private string _City;
		
		private string _Email;
		
		private System.Guid _IdLeague;
		
		private EntitySet<Player> _Players;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDTeamChanging(System.Guid value);
    partial void OnIDTeamChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnIdLeagueChanging(System.Guid value);
    partial void OnIdLeagueChanged();
    #endregion
		
		public Team()
		{
			this._Players = new EntitySet<Player>(new Action<Player>(this.attach_Players), new Action<Player>(this.detach_Players));
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDTeam", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid IDTeam
		{
			get
			{
				return this._IDTeam;
			}
			set
			{
				if ((this._IDTeam != value))
				{
					this.OnIDTeamChanging(value);
					this.SendPropertyChanging();
					this._IDTeam = value;
					this.SendPropertyChanged("IDTeam");
					this.OnIDTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdLeague", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid IdLeague
		{
			get
			{
				return this._IdLeague;
			}
			set
			{
				if ((this._IdLeague != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdLeagueChanging(value);
					this.SendPropertyChanging();
					this._IdLeague = value;
					this.SendPropertyChanged("IdLeague");
					this.OnIdLeagueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Player", Storage="_Players", ThisKey="IDTeam", OtherKey="IdTeam")]
		public EntitySet<Player> Players
		{
			get
			{
				return this._Players;
			}
			set
			{
				this._Players.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Team", Storage="_League", ThisKey="IdLeague", OtherKey="IDLeague", IsForeignKey=true)]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.Teams.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.Teams.Add(this);
						this._IdLeague = value.IDLeague;
					}
					else
					{
						this._IdLeague = default(System.Guid);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Players(Player entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
	}
}
#pragma warning restore 1591
